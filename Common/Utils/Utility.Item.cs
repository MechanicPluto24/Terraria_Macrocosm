using Macrocosm.Common.Global.Items;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using Terraria;
using Terraria.GameContent;
using Terraria.GameContent.ItemDropRules;
using Terraria.ID;

namespace Macrocosm.Common.Utils
{
    public static partial class Utility
    {
        public static GlowmaskGlobalItem Glowmask(this Item item)
        {
            return item.GetGlobalItem<GlowmaskGlobalItem>();
        }

        /// <summary>
        /// Helper method that converts the first rocket ammo found in the inventory 
        /// to the projectile ID generated by rocket ammo of a vanilla launcher 
        /// (either Grenade, Rocket or Mine)
        /// </summary>
        /// <param name="player"> The player using the picked rocket ammo </param>
        /// <param name="copyWeaponType"> The launcher type to copy </param>
        /// <returns> The projectile ID, defaults to Rocket I </returns>
        public static int GetRocketAmmoProjectileID(Player player, int copyWeaponType)
        {
            static bool TryFindingSpecificMatches(int launcher, int ammo, out int pickedProjectileId)
            {
                pickedProjectileId = 0;
                if (AmmoID.Sets.SpecificLauncherAmmoProjectileMatches.TryGetValue(launcher, out var value) && value.TryGetValue(ammo, out pickedProjectileId))
                    return true;

                launcher = AmmoID.Sets.SpecificLauncherAmmoProjectileFallback[launcher];
                if (launcher != -1)
                {
                    if (AmmoID.Sets.SpecificLauncherAmmoProjectileMatches.TryGetValue(launcher, out var fallbackValue) && fallbackValue.TryGetValue(ammo, out pickedProjectileId))
                        return true;
                }

                return false;
            }

            if (copyWeaponType != ItemID.GrenadeLauncher && copyWeaponType != ItemID.RocketLauncher && copyWeaponType != ItemID.ProximityMineLauncher)
                return ProjectileID.RocketI;

            Item launcher = new(copyWeaponType);
            Item ammo = player.ChooseAmmo(launcher);

            if (ammo is null)
                return 0;

            int type;

            // for mini nukes, liquid rockets
            if (TryFindingSpecificMatches(copyWeaponType, ammo.type, out int pickedProjectileId))
            {
                type = pickedProjectileId;
            }
            // for rockets I to IV
            else if (ammo.ammo == AmmoID.Rocket)
            {
                type = launcher.shoot + ammo.shoot;
            }
            else
            {
                type = ProjectileID.RocketI;
            }

            return type;

        }

        public static void AddVariationToRubblemakers(int itemType, int tileType, int tileStyle)
        {
            FlexibleTileWand.RubblePlacementSmall.AddVariation(itemType, tileType, tileStyle);
            FlexibleTileWand.RubblePlacementMedium.AddVariation(itemType, tileType, tileStyle);
            FlexibleTileWand.RubblePlacementLarge.AddVariation(itemType, tileType, tileStyle);
        }

        public static void AddVariationsToRubblemakers(int itemType, int tileType, params int[] tileStyles)
        {
            FlexibleTileWand.RubblePlacementSmall.AddVariations(itemType, tileType, tileStyles);
            FlexibleTileWand.RubblePlacementMedium.AddVariations(itemType, tileType, tileStyles);
            FlexibleTileWand.RubblePlacementLarge.AddVariations(itemType, tileType, tileStyles);
        }

        public static void AddVariationsToRubblemakers(int itemType, int tileType, Range tileStyles)
        {
            FlexibleTileWand.RubblePlacementSmall.AddVariations(itemType, tileType, tileStyles);
            FlexibleTileWand.RubblePlacementMedium.AddVariations(itemType, tileType, tileStyles);
            FlexibleTileWand.RubblePlacementLarge.AddVariations(itemType, tileType, tileStyles);
        }

        public static void DrawBossBagEffect(this Item item, SpriteBatch spriteBatch, Color colorFront, Color colorBack, float rotation, float scale)
        {
            Texture2D texture = TextureAssets.Item[item.type].Value;
            Rectangle frame = texture.Frame();

            Vector2 frameOrigin = frame.Size() / 2f;
            Vector2 offset = new Vector2(item.width / 2 - frameOrigin.X, item.height - frame.Height);
            Vector2 drawPos = item.position - Main.screenPosition + frameOrigin + offset;

            float time = Main.GlobalTimeWrappedHourly;
            float timer = item.timeSinceItemSpawned / 240f + time * 0.04f;

            time %= 4f;
            time /= 2f;

            if (time >= 1f)
                time = 2f - time;

            time = time * 0.5f + 0.5f;

            for (float i = 0f; i < 1f; i += 0.25f)
            {
                float radians = (i + timer) * MathHelper.TwoPi;
                spriteBatch.Draw(texture, drawPos + new Vector2(0f, 8f).RotatedBy(radians) * time, frame, colorFront, rotation, frameOrigin, scale, SpriteEffects.None, 0);
            }

            for (float i = 0f; i < 1f; i += 0.34f)
            {
                float radians = (i + timer) * MathHelper.TwoPi;
                spriteBatch.Draw(texture, drawPos + new Vector2(0f, 4f).RotatedBy(radians) * time, frame, colorBack, rotation, frameOrigin, scale, SpriteEffects.None, 0);
            }
        }

        public static void GetInfoText(this DropRateInfo dropRateInfo, bool locked, out string stackRange, out string dropRate)
        {
            if (dropRateInfo.stackMin != dropRateInfo.stackMax)
                stackRange = $"({dropRateInfo.stackMin}-{dropRateInfo.stackMax})";
            else if (dropRateInfo.stackMin == 1)
                stackRange = "";
            else
                stackRange = "(" + dropRateInfo.stackMin + ")";

            string originalFormat = "P";
            if (dropRateInfo.dropRate < 0.001)
                originalFormat = "P4";

            if (dropRateInfo.dropRate != 1f)
                dropRate = Terraria.Utils.PrettifyPercentDisplay(dropRateInfo.dropRate, originalFormat);
            else
                dropRate = "100%";

            if (locked)
            {
                dropRate = "???";
                stackRange = "";
            }
        }

        public static float ComputeDropRarity(this DropRateInfo dropRateInfo)
        {
            float averageStack = (dropRateInfo.stackMin + dropRateInfo.stackMax) / 2f;
            float rarity = (1f - dropRateInfo.dropRate) * (1f / (averageStack + 1f));
            return rarity;
        }

        public static int GetItemTypeFromWingID(int wingID)
        {
            foreach(var kvp in ContentSamples.ItemsByType)
            {
                int type = kvp.Key;
                Item item = kvp.Value;

                if (item.wingSlot == wingID)
                    return type;
            }

            return -1;
        }
    }
}
